{
	"abs": {
		"prefix": "abs",
		"body": [
			"abs(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "ABS returns the absolute value of the numeric argument x."
	},
	"and": {
		"prefix": "and",
		"body": [
			"and ${1:<OPERAND>}$0"
		],
		"description": "AND performs a bit-wise logical AND operation on two 16-bit values."
	},
	"append#": {
		"prefix": "append#",
		"body": [
			"append#${1:<CHANNEL>},${2:<FILENAME>}${3:,d${4:<DRIVE>}}${5:,u${6:<UNIT>}}$0"
		],
		"description": "Opens an existing sequential file of type SEQ or USR for writing, and positions the write pointer at the end of the file."
	},		
	"asc": {
		"prefix": "asc",
		"body": [ 
			"asc(${1:<STRING>})$0"
		],
		"description": "Takes the first character of the string argument and returns its numeric code value. The name was apparently chosen to be a mnemonic to ASCII, but the returned value is in fact the so-called PETSCII code."
	},
	"atn": {
		"prefix": "atn", 
		"body": [
			"atn(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "The numerical function ATN is a mathematical function that returns the arc tangent of a numeric value (the inverse function of TAN)."
	},
	"background": {
		"prefix": "background",
		"body": [
			"background ${1:<COLOUR>}$0"
		],
		"description": "Sets the background colour of the screen to the argument, which must be in the range of 0 to 255."
	},
	"backupUnit": {
		"prefix": "backup",
		"body": [
			"backup u${1|8,9|} to u${2|9,8|}$0"
		],
		"description": "The first form of BACKUP, specifying units for source and target can only be used for the drives connected to the internal FDC (Floppy Disk Controller). Units 8 and 9 are reserved for this controller."
	},
	"backupDevice": {
		"prefix": "backup",
		"body": [
			"backup d${1|0,1|} to d${2|1,0|}${3:,u${4:<UNIT>}}$0"
		],
		"description": "The second form of BACKUP, specifying drives for source and target, is meant to be used for dual drive units connected to the IEC bus. For example: CBM 4040, 8050, 8250 via an IEEE-488 to IEC adapter."
	},	
	"bank": {
		"prefix": "bank",
		"body": [
			"bank ${1:<BANK NUMBER>}$0"
		],
		"description": "Selects the memory configuration for BASIC commands that use 16-bit addresses."
	},
	"begin": {
		"prefix": "begin",
		"body": [
			"begin"
		],
		"description": "BEGIN and BEND act as a pair of braces around a compound statement to be executed after THEN or ELSE. This overcomes the single line limitation of the standard IF ... THEN ... ELSE clause."
	},
	"bend": {
		"prefix": "bend",
		"body": [
			"bend"
		],
		"description": "BEGIN and BEND act as a pair of braces around a compound statement to be executed after THEN or ELSE. This overcomes the single line limitation of the standard IF ... THEN ... ELSE clause."
	},
	"bit": {
		"prefix": "bit",
		"body": [
			"bit"
		],
		"description": "BIT is a secondary keyword and can only be used in conjunction with CLR or SET."
	},
	"bload": {
		"prefix": "bload",
		"body": [
			"bload ${1:<FILENAME>}${2:,b${3:<BANK>}}${4:,p${5:<MEMORY ADDRESS>}}${6:,r}${7:,d${8:<DRIVE>}}${9:,u${10:<UNIT>}}$0"
		],
		"description": "The command BLOAD (Binary LOAD) loads a file of type PRG into RAM at address P."
	},
	"boot": {
		"prefix": "boot",
		"body": [
			"boot ${1:${2:<FILENAME>}${3:,b${4:<BANK>}}${5:,p${6:<MEMORY ADDRESS>}}${7:,d${8:<DRIVE>}}${9:,u${10:<UNIT>}}}$0"
		],
		"description": "BOOT filename loads a file of type PRG into RAM at address P and bank B, and starts executing the code at the load address. BOOT with no parameters attempts to load and execute a file named AUTOBOOT.C65 from the default unit 8."
	},
	"bootsys": {
		"prefix": "boot",
		"body": [
			"boot sys"
		],
		"description": "BOOT SYS loads the boot sector from sector 0, track 1 and unit 8 to address $0400 in bank 0, and performs a JSR $0400 afterwards (Jump To Subroutine)."
	},	
	"border": {
		"prefix": "border",
		"body": [
			"border ${1:<COLOUR>}$0"
		],
		"description": "Sets the border colour of the screen to the argument, which must be in the range of 0 to 255."
	},
	"box": {
		"prefix": "box",
		"body": [
			"box ${1:<X0>},${2:<Y0>}${3:, ${4:<X1>},${5:<Y1>}}, ${6:<X2>},${7:<Y2>}${8:, ${9:<X3>},${10:<Y3>}}${11:,solid}$0"
		],
		"description": "The first form of BOX with two coordinate pairs and an optional solid parameter draws a simple rectangle, assuming that the coordinate pairs declare two diagonally opposite corners. The second form with four coordinate pairs declares a path of four points, which will be connected with lines. The path is closed by connecting the last coordinate with the first."
	},
	"bsave": {
		"prefix": "bsave",
		"body": [
			"bsave ${1:<FILENAME>},p${2:<START ADDRESS>} to p${3:<END ADDRESS>}${4:,b${5:<BANK NUMBER>}}${6:,d${7:<DRIVE>}}${9:,u${10:<UNIT>}}$0"
		],
		"description": "The command BSAVE (Binary SAVE) saves a memory range to a file of type PRG."
	},
	"bump": {
		"prefix": "bump",
		"body": [
			"bump (${1:<TYPE>})$0"
		],
		"description": "Used to detect sprite-sprite (type=1) or sprite-data (type=2) collisions. The return value is an 8-bit mask with one bit per sprite.5."
	},
	"bverify": {
		"prefix": "bverify",
		"body": [
			"bverify ${1:<FILENAME>}${2:,p${3:<MEMORY ADDRESS>}}${4:,b${5:<BANK NUMBER>}}${6:,d${7:<DRIVE>}}${8:,u${9:<UNIT>}}$0"
		],
		"description": "The command BVERIFY (Binary VERIFY) compares a memory range to a file of type PRG."
	},
	"catalog": {
		"prefix": "catalog",
		"body": [
			"catalog ${1:<FILEPATTERN>}${2:,w}${3:,r}${4:,d${5:<DRIVE>}}${6:,u${7:<UNIT>}}$0"
		],
		"description": "Prints a file catalog/directory of the specified disk."
	},
	"char": {
		"prefix": "char",
		"body": [
			"char ${1:<COLUMN>},${2:<ROW>},${3:<HEIGHT>},${4:<WIDTH>},${5:<DIRECTION>},${6:<STRING>}${7:,$${8:<ADDRESS OF CHARACTER SET>}}$0"
		],
		"description": "Displays text on a graphic screen. It can be used in all resolutions."
	},
	"chardef": {
		"prefix": "chardef",
		"body": [
			"chardef ${1:<CHARACTER NUMBER>},$${2:<BYTE 1>},$${3:<BYTE 2>},$${4:<BYTE 3>},$${5:<BYTE 4>},$${6:<BYTE 5>},$${7:<BYTE 6>},$${8:<BYTE 7>},$${9:<BYTE 8>}$0"
		],
		"description": "Change the bitmap matrix of characters"
	},
	"chdir": {
		"prefix": "chdir",
		"body": [
			"chdir ${1:<DIRECTORY NAME>}${2:,u${3:<UNIT>}}$0"
		],
		"description": "Change to a subdirectory or a parent directory."
	},															
	"chr": {
		"prefix": "chr",
		"body": [
			"chr$(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "CHR$ can be used to convert a number between 0 and 255 into an PETSCII character (of string type) and is the inverse function of ASC."
	},
	"circle": {
		"prefix": "circle",
		"body": [
			"circle ${1:<X COORDINATE>},${2:<Y COORDINATE>},${3:<RADIUS>}${4:,${5:<FLAGS>},${6:<START ANGLE>},${7:<STOP ANGLE>}}$0"
		],
		"description": "A special case of ELLIPSE, using the same value for horizontal and vertical radius."
	},	
	"close": {
		"prefix": "close",
		"body": [
			"close ${1:<CHANNEL NUMBER>}$0"
		],
		"description": "The BASIC command CLOSE closes an input or output channel."
	},
	"clr": {
		"prefix": "clr",
		"body": [
			"clr ${1:<VARIABLE>}$0"
		],
		"description": "Used for management of BASIC variables, arrays and strings. The runtime stack pointers, and the table of open channels is reset. After executing CLR all variables and arrays will be undeclared."
	},	
	"clr bit": {
		"prefix": "clr bit",
		"body": [
			"clr bit ${1:<MEMORY ADDRESS>},${2:<BIT NUMBER>}$0"
		],
		"description": "Clears (resets) a single bit at the memory address. The bit number is a value in the range of 0-7."
	},	
	"cmd": {
		"prefix": "cmd",
		"body": [
			"cmd ${1:<CHANNEL>}${2:,${3:<EXPRESSION>}}$0"
		],
		"description": "The BASIC command CMD changes the data output from the screen to another peripheral device like datasette, modem, printer or disk drive."
	},
	"collect": {
		"prefix": "collect",
		"body": [
			"collect ${1:d${2:<DRIVE>}}${3:,u${4:<UNIT>}}$0"
		],
		"description": "The BASIC command COLLECT rebuilds the BAM (Block Availability Map) of a disk, deleting splat files (files which have been opened, but not properly closed) and marking unused blocks as free."
	},
	"collision": {
		"prefix": "collision",
		"body": [
			"collision ${1:<TYPE>}${2:,${3:<LINE NUMBER>}}$0"
		],
		"description": "Enables or disables a user-programmed interrupt handler. A call without the line number argument disables the handler, while a call with line number enables it. "
	},		
	"color": {
		"prefix": "color",
		"body": [
			"color ${1:<COLOUR>}$0"
		],
		"description": "The command works in the same way as FOREGROUND, i.e: sets the foreground colour (text colour) of the screen to the colour argument, which must be in the range of 0 to 31."
	},	
	"concat": {
		"prefix": "concat",
		"body": [
			"concat ${1:<APPENDFILE>}${2:,d${3:<DRIVE>}} to ${4:<TARGETFILE>}${5:,d${6:<DRIVE>}}${7:,u${8:<UNIT>}}$0"
		],
		"description": "CONCAT appends the contents of appendfile to the targetfile. Afterwards, targetfile contains the contents of both files, while appendfile remains unchanged."
	},
	"cont": {
		"prefix": "cont",
		"body": [
			"cont"
		],
		"description": "Used to resume program execution after a break or stop caused by an END or STOP statement, or by pressing RUN STOP."
	},
	"copy": {
		"prefix": "copy",
		"body": [
			"copy ${1:<SOURCE>}${2:,d${3:<DRIVE>}} to ${4:<TARGET>}${5:,d${6:<DRIVE>}}${7:,u${8:<UNIT>}}$0"
		],
		"description": "Copies the contents of source to target. It is used to copy either single files or, by using wildcard characters, multiple files."
	},				
	"cos": {
		"prefix": "cos",
		"body": [
			"cos(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "The numeric function COS is a mathematical function which evaluates to the cosine for a given angle, a number considered to be in radians."
	},
	"data": {
		"prefix": "data",
		"body": [
			"data ${1:<CONSTANT>},${2:<CONSTANT>},${3:<CONSTANT>},${4:<CONSTANT>},${5:<CONSTANT>},${6:<CONSTANT>},${7:<CONSTANT>},${8:<CONSTANT>}$0"
		],
		"description": "The BASIC-Command DATA is used to store constant information in the program code, and is used with the BASIC-command READ. "
	},
	"cursor": {
		"prefix": "cursor",
		"body": [
			"cursor ${1:${2|on,off|},}${3:<COLUMN>},${4:<ROW>},${5:<STYLE>}$0"
		],
		"description": "Moves the text cursor to the specified position on the current text screen. ON or OFF displays or hides the cursor."
	},
	"cut": {
		"prefix": "cut",
		"body": [
			"cut ${1:<X POSITION>},${2:<Y POSITION>},${3:<WIDTH>},${4:<HEIGHT>}$0"
		],
		"description": "CUT is used on graphic screens and copies the content of the specified rectangle with upper left position x, y and the width and height to a buffer and fills the region afterwards with the colour of the currently selected pen."
	},
	"dclear": {
		"prefix": "dclear",
		"body": [
			"dclear ${1:d${2:<DRIVE>}}${3:,u${4:<UNIT>}}$0"	
		],
		"description": "Sends an initialise command to the specified unit and drive."
	},
	"dclose#":{
		"prefix": "dclose#",
		"body": [
			"dclose#${1:<CHANNEL NUMBER>}$0"
		],
		"description":"Closes a single file or all files for the specified unit. DCLOSE is used either with a channel argument or a unit number, but never both."
	},
	"dclose":{
		"prefix": "dclose",
		"body": [
			"dclose u${1:<UNIT>}$0"
		],
		"description":"Closes a single file or all files for the specified unit. DCLOSE is used either with a channel argument or a unit number, but never both."
	},
	"dec":{
		"prefix": "dec",
		"body": [
			"dec(${1:<STRING EXPRESSION>})$0"
		],
		"description":"Returns the decimal value of the argument, that is written as a hex string."
	},						
	"def fn":{
		"prefix": "def fn",
		"body": [
			"def fn ${1:<FUNCTION NAME>}(${2:<PARAMETER NAME>})=${3:<MATHEMATICAL EXPRESSION>}$0"
		],
		"description":"The BASIC-command DEF defines a function with exactly one single numeric argument which can be executed with FN afterwards."
	},
	"deleteLine": {
		"prefix": "delete",
		"body": [
			"delete ${1:<LINE RANGE>}$0"		
		],
		"description": "The BASIC command DELETE is also used to delete a range of lines from the BASIC program."
	},
	"deleteFile": {
		"prefix": "delete",
		"body": [
			"delete ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}${6:,r}$0"
		],
		"description": "The BASIC command DELETE is also used to delete files from disk."
	},
	"dir": {
		"prefix": "dir",
		"body": [
			"dir ${1:<FILEPATTERN>}${2:,w}${3:,r}${4:,d${5:<DRIVE>}}${6:,u${7:<UNIT>}}$0"
		],
		"description": "Prints a file directory/catalog of the specified disk."
	},
	"directory": {
		"prefix": "directory",
		"body": [
			"directory ${1:<FILEPATTERN>}${2:,w}${3:,r}${4:,d${5:<DRIVE>}}${6:,u${7:<UNIT>}}$0"
		],
		"description": "Prints a file directory/catalog of the specified disk."
	},
	"disk": {
		"prefix": "disk",
		"body": [
			"disk ${1:<COMMAND STRING>}${2:,u${3:<UNIT>}}$0"			
		],
		"description": "Sends a command string to the specified disk unit."
	},
	"dload": {
		"prefix": "dload",
		"body": [
			"dload ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"			
		],
		"description": "The first form loads a file of type PRG into memory reserved for BASIC programs."
	},
	"dmode": {
		"prefix": "dmode",
		"body": [
			"dmode ${1:<JAM>},${2:<COMPLIMENT>},${3:<STENCIL>},${4:<STYLE>},${5:<THICK>}$0"			
		],
		"description": "The BASIC command DMOD (Display MODE) sets several parameters of the graphics context, which is used by drawing commands."
	},							
	"dim": {
		"prefix": "dim",
		"body": [
			"dim ${1:<VARIABLE>}(${2:<LIMITS>})$0"			
		],
		"description": "The BASIC command DIM declares the shape, bounds and the type of a BASIC array. An array can have one or more dimensions."
	},
	"do": {
		"prefix": "do",
		"body": [
			"do",
			"${1:<EXPRESSION>}",
			"loop$0"			
		],
		"description": "DO and LOOP define the start of a BASIC loop. Using DO and LOOP alone without any modifiers creates an infinite loop, which can only be exited by the EXIT statement."
	},
	"doAdvanced": {
		"prefix": "do",
		"body": [
			"do ${1:${2|until,while|} ${3:<LOGICAL EXPRESSION>}}",
			"${4:<EXPRESSION>} ${5:exit}",
			"loop ${6:${7|until,while|} ${8:<LOGICAL EXPRESSION>}}$0"			
		],
		"description": "DO and LOOP define the start of a BASIC loop. Using DO and LOOP alone without any modifiers creates an infinite loop, which can only be exited by the EXIT statement."
	},
	"dopen": {
		"prefix": "dopen",
		"body": [
			"dopen#${1:<CHANNEL NUMBER>},${2:<FILENAME>}${3:,l${4:<RECLEN>}}${5:,w}${6:,d${7:<DRIVE>}}${8:,u${9:<UNIT>}}$0"			
		],
		"description": "Opens a file for reading or writing."
	},
	"dot": {
		"prefix": "dot",
		"body": [
			"dot ${1:<X POS>},${2:<Y POS>}${3:,${4:<COLOUR>}}$0"			
		],
		"description": "Draws a pixel at screen coordinates x and y. The optional third parameter defines the colour to be used. If not specified, the current pen colour will be used."
	},
	"dpat": {
		"prefix": "dpat",
		"body": [
			"dpat ${1:<TYPE>}${2:,${3:<NUMBER>},${5:<PATTERN>}}$0"			
		],
		"description": "Drawing PATtern sets the pattern of the graphics context for drawing commands."
	},
	"ds": {
		"prefix": "ds",
		"body": [
			"ds"			
		],
		"description": "DS holds the status of the last disk operation."
	},
	"ds$": {
		"prefix": "ds$",
		"body": [
			"ds$"			
		],
		"description": "DS$ holds the status of the last disk operation in text form of the format: Code,Message,Track,Sector."
	},
	"dsave": {
		"prefix": "dsave",
		"body": [
			"dsave ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "The BASIC command DISK SAVE saves the BASIC program to a file of type PRG."
	},
	"dt$": {
		"prefix": "dt$",
		"body": [
			"dt$"			
		],
		"description": "DT$ holds the current date and is updated before each usage from the RTC (Real-Time Clock). The string DT$ is formatted as: ”DD-MON-YYYY”."
	},
	"dverify": {
		"prefix": "dverify",
		"body": [
			"dverify ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "The BASIC command DISK VERIFY compares the BASIC program in memory with a disk file of type PRG."
	},
	"edit": {
		"prefix": "edit",
		"body": [
			"edit ${1|on,off|}$0"			
		],
		"description": "EDIT switches the built-in editor either to text mode with EDIT ON, or to the BASIC program editor withEDIT OFF."
	},
	"edma": {
		"prefix": "edma",
		"body": [
			"edma ${1:<COMMAND>},${2:<LENGHT>},${3:<SOURCE>},${4:<TARGET>}${5:,${6:<SUB COMMAND>},${7:<MODIFIER>}}$0"
		],
		"description": "EDMA (”Extended Direct Memory Access”) is the fastest method to manipulate memory areas using the DMA controller."
	},
	"el": {
		"prefix": "el",
		"body": [
			"el"			
		],
		"description": "EL has the value of the line where the most recent BASIC error occurred, or the value -1 if there was no error."
	},
	"ellipse": {
		"prefix": "ellipse",
		"body": [
			"ellipse ${1:<X CENTER>},${2:<Y CENTER>},${3:<X RADIUS>},${4:<Y RADIUS>}${5:,${6:<FLAGS>},${7:<START ANGLE>},${8:<STOP ANGLE>}}$0"
		],
		"description": "Draws an ellipse."
	},
	"else": {
		"prefix": "else",
		"body": [
			"else"			
		],
		"description": "ELSE is an optional part of an IF statement."
	},
	"end": {
		"prefix": "end",
		"body": [
			"end"			
		],
		"description": "Ends the execution of the BASIC program. The READY. prompt appears and the computer goes into direct mode waiting for keyboard input."
	},
	"envelope": {
		"prefix": "envelope",
		"body": [
			"envelope ${1:<ENVELOPE SLOT>}${2:,${3:<ATTACK>},${4:<DECAY>},${5:<SUSTAIN>},${6:<RELEASE>},${7:<WAVEFORM>},${8:<PULSE>}}$0"			
		],
		"description": "Used to define the parameters for the synthesis of a musical instrument."
	},
	"er": {
		"prefix": "er",
		"body": [
			"er"			
		],
		"description": "ER has the value of the most recent BASIC error that has occurred, or -1 if there was no error."
	},
	"erase": {
		"prefix": "erase",
		"body": [
			"erase ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}${6:,r}}$0"
		],
		"description": "Used to erase a disk file."
	},
	"err$": {
		"prefix": "err$",
		"body": [
			"err$(${1:<NUMBER>})$0"			
		],
		"description": "Used to convert an error number to an error string."
	},
	"exit": {
		"prefix": "exit",
		"body": [
			"exit"			
		],
		"description": "Exits the current DO .. LOOP and continues execution at the first statement after LOOP."
	},
	"exp": {
		"prefix": "exp",
		"body": [
			"exp(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "The EXP (EXPonential function) computes the value of the mathematical constant Euler’s number (2.71828183) raised to the power of the argument."
	},
	"fast": {
		"prefix": "fast",
		"body": [
			"fast ${1:<SPEED>}$0"			
		],
		"description": "Set CPU clock to 1MHz, 3.5MHz or 40MHz."
	},
	"fgosub": {
		"prefix": "fgosub",
		"body": [
			"fgosub ${1:<NUMERIC EXPRESSION>}$0"
		],
		"description": "Evaluates the given numeric expression, then calls (GOSUBs) the subroutine at the resulting line number."
	},
	"fgoto": {
		"prefix": "fgoto",
		"body": [
			"fgoto ${1:<NUMERIC EXPRESSION>}$0"
		],
		"description": "Evaluates the given numeric expression, then jumps (GOesTO) to the resulting line number."
	},
	"filter": {
		"prefix": "filter",
		"body": [
			"filter ${1:<SID>}${2:,${3:<FREQ>},${4:<LOW PASS>},${5:<BAND PASS>},${6:<HIGH PASS>},${7:<RESONANCE>}}$0"			
		],
		"description": "Sets the parameters for a SID sound filter."
	},
	"font":{
		"prefix": "font",
		"body": [
			"font ${1|a,b,c|}$0"
		],
		"description":"FONT is used to switch between fonts, and the code pages PETSCII, and enhanced PETSCII."
	},
	"fn":{
		"prefix": "fn",
		"body": [
			"fn ${1:<FUNCTION NAME>}(${2:<NUMERIC EXPRESSION>})$0"
		],
		"description":"The BASIC command FN executes a function which has been defined previously in the course of the program with the BASIC-command DEF."
	},
	"for": {
		"prefix": "for",
		"body": [
			"for ${1:<COUNTER VARIABLE>}=${2:<START VALUE>} to ${3:<TO END VALUE>}:${4:<EXPRESSION>}:next ${1:<COUNTER VARIABLE>}$0"
		],
		"description": "The BASIC command FOR is the start command of a FOR…TO…NEXT loop."
	},
	"forStep": {
		"prefix": "for",
		"body": [
			"for ${1:<COUNTER VARIABLE>}=${2:<START VALUE>} to ${3:<END VALUE>} step ${4:<STEPSIZE>}:${5:<EXPRESSION>}:next ${1:<COUNTER VARIABLE>}$0"
		],
		"description": "The BASIC command FOR is the start command of a FOR…TO…STEP…NEXT loop."
	},	
	"forMulti": {
		"prefix": "for",
		"body": [
			"for ${1:<COUNTER VARIABLE>}=${2:<START VALUE>} to ${3:<TO END VALUE>}",
			"${4:<EXPRESSION>}",
			"next ${1:<COUNTER VARIABLE>}$0"
		],
		"description": "The BASIC command FOR is the start command of a FOR…TO…NEXT loop."
	},		
	"forMultiStep": {
		"prefix": "for",
		"body": [
			"for ${1:<COUNTER VARIABLE>}=${2:<START VALUE>} to ${3:<END VALUE>} step ${4:<STEPSIZE>}",
			"${5:<EXPRESSION>}",
			"next ${1:<COUNTER VARIABLE>}$0"
		],
		"description": "The BASIC command FOR is the start command of a FOR…TO…STEP…NEXT loop."
	},
	"foreground": {
		"prefix": "foreground",
		"body": [
			"foreground ${1:<COLOUR>}$0"
		],
		"description": "Sets the foreground colour (text colour) of the screen to the argument, which must be in the range of 0 to 31."
	},	
	"format": {
		"prefix": "format",
		"body": [
			"format ${1:<DISKNAME>}${2:,i${3:<id>}}${4:,d${5:<DRIVE>}}${6:,u${7:<UNIT>}}$0"
		],
		"description": "Used to format (or clear) a disk."
	},
	"fre": {
		"prefix": "fre",
		"body": [
			"fre(${1:<BANK NUMBER>})$0"
		],
		"description": "Returns the number of free bytes for banks 0 or 1, or the ROM version if the argument is negative."
	},
	"fread#": {
		"prefix": "fread#",
		"body": [
			"fread#${1:<CHANNEL>},${2:<POINTER>},${3:<SIZE>}$0"
		],
		"description": "Reads size bytes from channel to memory starting at the 32-bit address pointer."
	},
	"freezer": {
		"prefix": "freezer",
		"body": [
			"freezer"
		],
		"description": "Calling FREEZER via BASIC command is an alternative to the keypress of RESTORE ."
	},
	"fwrite#": {
		"prefix": "fwrite#",
		"body": [
			"fwrite#${1:<CHANNEL>},${2:<POINTER>},${3:<SIZE>}$0"
		],
		"description": "Writes size bytes to channel from memory starting at the 32-bit address pointer."
	},
	"gcopy": {
		"prefix": "gcopy",
		"body": [
			"gcopy ${1:<X POS>},${2:<Y POS>},${3:<WIDTH>},${4:<HEIGHT>}$0"
		],
		"description": "GCOPY is used on graphic screens and copies the content of the specified rectangle with upper left position x, y and the width and height to the cut/copy/paste buffer."
	},
	"get": {
		"prefix": "get",
		"body": [
			"get ${1:<VARIABLE>}$0"
		],
		"description": "The BASIC command GET reads one or more chars from the keyboard cache into a variable (string, floating point or integer) and can only be used in a BASIC program."
	},
	"get#": {
		"prefix": "get#",
		"body": [
			"get#${1:<CHANNEL NUMBER>},${2:<VARIABLE>}$0"
		],
		"description": "The BASIC command GET# reads a single byte from the channel argument and assigns single character strings to string variables, or an 8-bit binary value to numeric variables. "
	},
	"getkey": {
		"prefix": "getkey",
		"body": [
			"getkey ${1:<VARIABLE>}$0"
		],
		"description": "The BASIC command GETKEY gets the next character (or byte value of the next character) from the keyboard queue. If the queue is empty, the program will wait until a key has been pressed."
	},	
	"go64": {
		"prefix": "go64",
		"body": [
			"go64"
		],
		"description": "The BASIC command GO64 Switches the MEGA65 to C64 compatible mode."
	},	
	"gosub": {
		"prefix": "gosub",
		"body": [
			"gosub ${1:<LINE NUMBER>}$0"
		],
		"description": "GOSUB is a specialized form of the GOTO statement, with one important difference: GOSUB remembers where it came from."
	},
	"goto": {
		"prefix": "goto",
		"body": [
			"goto ${1:<LINE NUMBER>}$0"
		],
		"description": "The word GOTO followed by a number will make the program jump to the line with that number."
	},
	"graphic": {
		"prefix": "graphic",
		"body": [
			"graphic clr"
		],
		"description": "Initialises the BASIC graphic system. It clears the graphics memory and screen, and sets all parameters of the graphics context to their default values."
	},
	"header": {
		"prefix": "header",
		"body": [
			"header ${1:<DISKNAME>}${2:,i${3:<id>}}${4:,d${5:<DRIVE>}}${6:,u${7:<UNIT>}}$0"
		],
		"description": "Used to format (or clear) a disk."
	},
	"help": {
		"prefix": "help",
		"body": [
			"help"
		],
		"description": "When the BASIC program stops due to an error, HELP can be used to gain further information."
	},
	"hex$": {
		"prefix": "hex$",
		"body": [
			"hex$(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "Returns a four character hexadecimal representation of the argument."
	},
	"highlight": {
		"prefix": "highlight",
		"body": [
			"highlight ${1:<COLOUR>}${2:,${3:<MODE>}}$0"
		],
		"description": "Sets the colours used for highlighting. Different colours can be set for system messages, REM statements and BASIC 65 keywords."
	},
	"import": {
		"prefix": "import",
		"body": [
			"import ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "The IMPORT command loads a BASIC program in text format and type SEQ into memory reserved for BASIC programs."
	},
	"info": {
		"prefix": "info",
		"body": [
			"info"
		],
		"description": "INFO gibt eine Übersicht einiger Systemwerte und des belegten und freien Speichers des aktuellen BASIC 65-Programms aus."
	},				
	"ifThen": {
		"prefix": "if",
		"body": [
			"if ${1:<EXPRESSION>} then ${2:<TRUE CLAUSE>}${3: : else ${4:<FALSE CLAUSE>}}$0"
		],
		"description": "The BASIC command IF is used to test a condition."
	},
	"ifGoto": {
		"prefix": "if",
		"body": [
			"if ${1:<EXPRESSION>} goto ${2:<LINE NUMBER>}${3: : else ${4:<FALSE CLAUSE>}}$0"
		],
		"description": "The BASIC command IF is used to test a condition."
	},
	"input": {
		"prefix": "input",
		"body": [
			"input ${1:<STRING>};${2:<VARIABLE>}$0"
		],
		"description": "The BASIC command INPUT is used to read data from the keyboard into one or more supplied variables."
	},
	"inputList": {
		"prefix": "input",
		"body": [
			"input ${1:<STRING>};${2:<VARIABLE>},${3:<VARIABLE>}$0"
		],
		"description": "The BASIC command INPUT is used to read data from the keyboard into one or more supplied variables."
	},	
	"input#": {
		"prefix": "input#",
		"body": [
			"input#${1:<CHANNEL NUMBER>},${2:<VARIABLE>}$0"
		],
		"description": "The BASIC command INPUT# is used for reading data from a file stored on peripheral device media such as disk or tape."
	},
	"instr": {
		"prefix": "instr",
		"body": [
			"instr(${1:<HAYSTACK>},${2:<NEEDLE>}${3:,${4:<START>}})$0"
		],
		"description": "Locates the position of the string expression needle in the string expression haystack, and returns the index of the first occurrence, or zero if there is no match."
	},
	"int": {
		"prefix": "int",
		"body": [
			"int(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "INT returns the integer part of the argument. This function is NOT limited to the typical 16-bit integer range (-32768 to 32767), as it uses real arithmetic."
	},
	"joy": {
		"prefix": "joy",
		"body": [
			"joy(${1:<PORT>})$0"
		],
		"description": "Returns the state of the joystick for the selected controller port (1 or 2). Bit 7 contains the state of the fire button."
	},
	"key": {
		"prefix": "key",
		"body": [
			"key"
		],
		"description": "Reads the state of the function keys and lists the current assignments."
	},
	"keyOnOff": {
		"prefix": "key",
		"body": [
			"key ${1|on,off|}$0"
		],
		"description": "KEY ON switch on function key strings. The keys will send assigned strings if pressed. KEY OFF switch off function key strings. The keys will send their character code if pressed."
	},
	"keyLoad": {
		"prefix": "key",
		"body": [
			"key load ${1:<FILENAME>}$0"
		],
		"description": "KEY LOAD loads key definitions from file. KEY SAVE saves key definitions to file."
	},
	"keySave": {
		"prefix": "key",
		"body": [
			"key save ${1:<FILENAME>}$0"
		],
		"description": "KEY LOAD loads key definitions from file. KEY SAVE saves key definitions to file."
	},
	"keyNumber": {
		"prefix": "key",
		"body": [
			"key ${1:<NUMBER>},${2:<STRING>}$0"
		],
		"description": "KEY number, string assigns the string to the key with the given number."
	},
	"left$": {
		"prefix": "left$",
		"body": [
			"left$(${1:<STRING>},${2:<AMOUNT OF CHARACTERS>})$0"
		],
		"description": "LEFT$ will be used for cutting strings into component parts beginning at the left side until to the indicated integer number."
	},
	"len": {
		"prefix": "len",
		"body": [
			"len(${1:<STRING>})$0"
		],
		"description": "The function LEN returns the number of characters in a string. "
	},
	"let": {
		"prefix": "let",
		"body": [
			"let ${1:<VARIABLE>}=${2:<EXPRESSION>}$0"
		],
		"description": "The BASIC-Command LET assigns values (or results of expressions) to variables."
	},
	"line": {
		"prefix": "line",
		"body": [
			"line ${1:<X BEGIN>},${2:<Y BEGIN>}${3:,${4:<X NEXT>},${5:<Y NEXT>}}$0"
		],
		"description": "Draws a pixel at (X BEGIN/Y BEGIN), if only one coordinate pair is given. If more than one pair is defined, a line is drawn on the current graphics screen from the coordinate to the next coordinate pair(s)."
	},
	"lineInput#": {
		"prefix": "input#",
		"body": [
			"line input#${1:<CHANNEL NUMBER>},${2:<VARIABLE>}$0"
		],
		"description": "Reads one record per variable from an input device, (such as a disk drive) and assigns the read data to the variable."
	},	
	"listFile": {
		"prefix": "list",
		"body": [
			"list ${1|p |}${2:<FILENAME>}${3:,u${4:<UNIT>}}$0"
		],
		"description": "Used to list a BASIC program directly from unit, which by default is 8."
	},	
	"list": {
		"prefix": "list",
		"body": [
			"list ${1|p |}${2:<LINE RANGE>}$0"
		],
		"description": "Used to list a range of lines from the BASIC program. The line range consists of the first and/or last line to list, or a single line number."
	},	
	"load": {
		"prefix": "load",
		"body": [
			"load ${1:<FILENAME>}${2:,${3:<UNIT>}${4:,${5:<FLAG>}}}$0"
		],
		"description": "The BASIC command LOAD loads a file of type PRG into memory reserved for BASIC programs."
	},
	"loadiff": {
		"prefix": "loadiff",
		"body": [
			"loadiff ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "Loads an IFF file into graphics memory."
	},
	"lock": {
		"prefix": "lock",
		"body": [
			"lock ${1:<FILENAME/PATTERN>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "Used to lock files. The specified file or a set of files, that matches the pattern, is locked and cannot be deleted with the commands DELETE, ERASE or SCRATCH."
	},
	"log": {
		"prefix": "log",
		"body": [
			"log(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "Computes the value of the natural logarithm of the argument. The natural logarithm uses Euler’s number (2.71828183) as base, not 10 which is typically used in log functions on a pocket calculator."
	},
	"log10": {
		"prefix": "log10",
		"body": [
			"log10(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "Computes the value of the decimal logarithm of the argument. The decimal logarithm uses 10 as base."
	},
	"loop": {
		"prefix": "loop",
		"body": [
			"loop ${1:${2|until,while|} ${3:<LOGICAL EXPRESSION>}}$0"
		],
		"description": "LOOP define the start of a BASIC loop. Using LOOP alone without any modifiers creates an infinite loop, which can only be exited by the EXIT statement."
	},
	"lpen": {
		"prefix": "lpen",
		"body": [
			"lpen(${1:<COORDINATE>})$0"
		],
		"description": "This function requires the use of a CRT monitor and a light pen connected to port 1. LPEN(0) = X position and LPEN(1) = Y position."
	},
	"mem": {
		"prefix": "mem",
		"body": [
			"mem ${1:<MASK4>},${2:<MASK5>}$0"
		],
		"description": "The command MEM uses MASK4 and MASK5 which byte values, that are interpreted as mask of 8 bits. Each bit set to 1 reserves an 8K segment of memory in bank 4 for the first argument and in bank 5 for the second argument.."
	},
	"merge": {
		"prefix": "merge",
		"body": [
			"merge ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "MERGE loads a BASIC program file from disk and appends it to the program in memory."
	},
	"mid$": {
		"prefix": "mid$",
		"body": [
			"mid$(${1:<STRING>},${2:<START INDEX>},${3:<SUB-STRING LENGHT>}) ${4:= ${5:<STRING EXPRESSION>}}$0"
		],
		"description": "MID$ can be used either as a function which returns a string, or as a statement for inserting sub-strings into an existing string."
	},
	"mkdir": {
		"prefix": "mkdir",
		"body": [
			"mkdir ${1:<DIRNAME>},l${3:<SIZE>}${4:,u${5:<UNIT>}}$0"
		],
		"description": "Make (create) a subdirectory on a floppy or D81 disk image."
	},
	"mod": {
		"prefix": "mod",
		"body": [
			"mod(${1:<DIVIDEND>},${2:<DIVISOR>})$0"
		],
		"description": "The MOD function returns the remainder of the division."
	},
	"monitor": {
		"prefix": "monitor",
		"body": [
			"monitor"
		],
		"description": "Calls the machine language monitor program, which is mainly used for debugging."
	},
	"mount": {
		"prefix": "mount",
		"body": [
			"mount ${1:<FILENAME>}${2:,u${3:<UNIT>}}$0"
		],
		"description": "Mount a floppy image file of type D81 from SD-Card to unit 8 (default) or unit 9."
	},
	"mouseOn": {
		"prefix": "mouse",
		"body": [
			"mouse on${1:,${2:<PORT>},${3:<SPRITE>},${4:<POS>}}$0"
		],
		"description": "Enables the mouse driver and connects the mouse at the specified port with the mouse pointer sprite."
	},
	"mouseOff": {
		"prefix": "mouse",
		"body": [
			"mouse off"
		],
		"description": "MOUSE OFF disables the mouse driver and frees the associated sprite."
	},
	"movsprPos": {
		"prefix": "movspr",
		"body": [
			"movspr ${1:<NUMBER>},${2:<X POS>},${3:<Y POS>}$0"
		],
		"description": "Moves a sprite on screen. Each position argument consists of two 16-bit values, which specify either an absolute coordinate, a relative coordinate, an angle, or a speed."
	},
	"movsprStartEnd": {
		"prefix": "movspr",
		"body": [
			"movspr ${1:<NUMBER>},${2:<START X POS>},${3:<START Y POS>} to ,${4:<END X POS>},${5:<END Y POS>},${6:<ANGLE>}#${7:<SPEED>}$0"
		],
		"description": "Places the sprite at the start position, defines the destination position, and the speed of movement."
	},
	"new": {
		"prefix": "new",
		"body": [
			"new"
		],
		"description": "Resets all BASIC parameters to their default values."
	},
	"newRestore": {
		"prefix": "new",
		"body": [
			"new restore"
		],
		"description": "If there were no LOAD operations, or editing performed after NEW, the program can be restored with the NEW RESTORE."
	},
	"next": {
		"prefix": "next",
		"body": [
			"next"
		],
		"description": "Marks the end of the BASIC loop associated with the given index variable. When a BASIC loop is declared with FOR, it must end with NEXT."
	},
	"not": {
		"prefix": "not",
		"body": [
			"not(${1:<OPERAND>})$0"
		],
		"description": "Performs a bit-wise logical NOT operation on a 16-bit value."
	},
	"off": {
		"prefix": "off",
		"body": [
			"off"
		],
		"description": "OFF is a secondary keyword used in combination with primary keywords, such as COLOR, KEY, and MOUSE."
	},
	"on": {
		"prefix": "on",
		"body": [
			"on ${1:<EXPRESSION>} ${2|gosub,goto|} ${3:<LINE NUMBER>}$0"
		],
		"description": "ON calls either a computed GOSUB or GOTO statement."
	},
	"open": {
		"prefix": "open",
		"body": [
			"open ${1:<CHANNEL NUMBER>},${2:<DEVICE NUMBER>}${3:,${4:<SECONDARY NUMBER>}${5:,${6:<FILENAME>}}}$0"
		],
		"description": "Opens an input/output channel for a device."
	},
	"or": {
		"prefix": "or",
		"body": [
			"${1:<OPERAND>} or ${2:<OPERAND>}$0"
		],
		"description": "Performs a bit-wise logical OR operation on two 16-bit values."
	},
	"paint": {
		"prefix": "paint",
		"body": [
			"paint ${1:<X COORDINATE>},${2:<Y COORDINATE>},${3:<PAINT MODE>}${4:,${5:<REGION BORDER COLOUR>}}$0"
		],
		"description": "Performs a flood fill of an enclosed graphics area using the current pen colour."
	},
	"palette": {
		"prefix": "palette",
		"body": [
			"palette ${1:<SCREEN NUMBER>},${2:<COLOUR>},${3:<RED>},${4:<GREEN>},${5:<BLUE>}$0"
		],
		"description": "PALETTE can be used to change an entry of the system colour palette, or the palette of a screen. "
	},
	"paletteColor": {
		"prefix": "palette",
		"body": [
			"palette color ${1:<COLOUR>},${2:<RED>},${3:<GREEN>},${4:<BLUE>}$0"
		],
		"description": "COLOR keyword for changing system palette. "
	},	
	"paletteRestore": {
		"prefix": "palette",
		"body": [
			"palette restore$0"
		],
		"description": "PALETTE RESTORE resets the system palette to the default values."
	},
	"paste": {
		"prefix": "paste",
		"body": [
			"paste ${1:<X POS>},${2:<Y POS>},${3:<WIDTH>},${4:<HEIGHT>}$0"
		],
		"description": "PASTE is used on graphic screens and pastes the content of the cut/- copy/paste buffer into the screen."
	},
	"peek": {
		"prefix": "peek",
		"body": [
			"peek(${1:<MEMORY ADDRESS>})$0"
		],
		"description": "The BASIC function PEEK returns the memory contents of the specified address, which must be in the range 0 through 65535."
	},
	"pen": {
		"prefix": "pen",
		"body": [
			"pen ${1:${2:<PEN>},}${3:<COLOUR>}$0"
		],
		"description": "Sets the colour of the graphic pen."
	},
	"pixel": {
		"prefix": "pixel",
		"body": [
			"pixel(${1:<X POS>},${2:<Y POS>})$0"
		],
		"description": "Returns the colour of a pixel at the given position."
	},
	"play": {
		"prefix": "play",
		"body": [
			"play ${1:<STRING 1>},${2:<STRING 2>}$0"
		],
		"description": "PLAY can be followed by up to six comma-separated string arguments, where each argument provides the sequence of notes and directives to be played."
	},
	"pointer": {
		"prefix": "pointer",
		"body": [
			"pointer(${1:<VARIABLE>})$0"
		],
		"description": "Returns the current address of a variable or an array element as a 32-bit pointer."
	},
	"polygon": {
		"prefix": "polygon",
		"body": [
			"polygon ${1:<X POS>},${2:<Y POS>},${3:<X RAD>},${4:<Y RAD>},${5:<SIDES>}${6:,${7:<DRAWSIDES>},${8:<SUBTEND>},${9:<ANGLE>},${10:<SOLID>}}$0"
		],
		"description": "Draws a regular n-sided polygon. The polygon is drawn using the current drawing context set with SCREEN, PALETTE, and PEN."
	},
	"poke": {
		"prefix": "poke",
		"body": [
			"poke ${1:<MEMORY ADDRESS>},${2:VALUE}${3:,${4:VALUE}}$0"
		],
		"description": "The BASIC command POKE changes the content of any address in the memory address, ranging from 0 to 65535, to the given byte value in the range 0 through 255."
	},
	"pos": {
		"prefix": "pos",
		"body": [
			"pos(${1:<DUMMY ARGUMENT>})$0"
		],
		"description": "Returns the cursor column relative to the currently used window. 'DUMMY ARGUMENT' a numeric value, which is ignored."
	},
	"pot": {
		"prefix": "pot",
		"body": [
			"pot(${1:<PADDLE NUMBER>})$0"
		],
		"description": "Returns the position of a paddle. A value greater than 255 indicates that the fire button is also being pressed."
	},
	"print": {
		"prefix": "print",
		"body": [
			"print ${1:<EXPRESSION>}$0"
		],
		"description": "The BASIC command PRINT is used to print data to the current output device, normally the screen."
	},
	"print#": {
		"prefix": "print",
		"body": [
			"print#${1:<CHANNEL NUMBER>},${2:<ARGUMENTS>}$0"
		],
		"description": "Evaluates the argument list, and prints the formatted values to the device assigned to channel."
	},
	"printUsing": {
		"prefix": "print",
		"body": [
			"print${1:#${2:<CHANNEL NUMBER>},} using ${3:<FORMAT>};${4:<ARGUMENT>}$0"
		],
		"description": "Parses the format string and evaluates the argument."
	},
	"rcolor": {
		"prefix": "rcolor",
		"body": [
			"rcolor(${1:<COLOUR SOURCE>})$0"
		],
		"description": "Returns the current colour index for the selected colour source."
	},
	"rcursor": {
		"prefix": "rcursor",
		"body": [
			"rcursor ${1:<COLUMN VARIABLE>},${2:<ROW VARIABLE>}$0"
		],
		"description": "Returns the current cursor column and row."
	},
	"read": {
		"prefix": "read",
		"body": [
			"read ${1:<VARIABLE>}$0"
		],
		"description": "The BASIC command READ is used for reading constant values from DATA lines into the indicated variables."
	},
	"record#": {
		"prefix": "record#",
		"body": [
			"record#${1:<CHANNEL NUMBER>},${2:<RECORD>}${3:,${4:<RECORD>}}$0"
		],
		"description": "Positions the read/write pointer of a relative file."
	},
	"rem": {
		"prefix": "rem",
		"body": [
			"rem ${1:<comment>}",
			"$0"
		],
		"description": "The BASIC comment."
	},
	"remMultiline": {
		"prefix": "rem",
		"body": [
			"${1:<LINE NUMBER>} rem *********************************",
			"${2:<LINE NUMBER>} rem ***  ${3:<comment>}  ***",
			"${4:<LINE NUMBER>} rem *********************************",
			"$0"
		],
		"description": "The BASIC comment."
	},
	"remHeader": {
		"prefix": "rem",
		"body": [
			"${1:<LINE NUMBER>} rem *********************************",
			"${2:<LINE NUMBER>} rem ***                           ***",
			"${3:<LINE NUMBER>} rem ***  ${4:<PROGRAM NAME>}     ***",
			"${5:<LINE NUMBER>} rem ***                           ***",
			"${6:<LINE NUMBER>} rem ***  by ${7:<NAME>} $CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR  ***",			
			"${8:<LINE NUMBER>} rem ***                           ***",
			"${9:<LINE NUMBER>} rem *********************************",
			"$0"
		],
		"description": "The BASIC comment."
	},
	"rename": {
		"prefix": "rename",
		"body": [
			"rename ${1:<OLD>} to ${2:<NEW>}${3:,d${4:<DRIVE>}}${5:,u${6:<UNIT>}}$0"
		],
		"description": "Renames a disk file."
	},
	"restore": {
		"prefix": "restore",
		"body": [
			"restore ${1:<LINE>}$0"
		],
		"description": "Set, or reset the internal pointer for READ from DATA statements."
	},
	"resumeLine": {
		"prefix": "resume",
		"body": [
			"resume ${1:<LINE>}$0"
		],
		"description": "Used in a TRAP routine to resume normal program execution after handling an error."
	},
	"resumeNext": {
		"prefix": "resume",
		"body": [
			"resume next"
		],
		"description": "Used in a TRAP routine to resume normal program execution after handling an error."
	},
	"return": {
		"prefix": "return",
		"body": [
			"return"
		],
		"description": "Returns control from a subroutine, which was called with GOSUB or an event handler declared with COLLISION."
	},
	"rgraphic": {
		"prefix": "rgraphic",
		"body": [
			"rgraphic(${1:<SCREEN NUMBER>},${2:<PARAMETER>})$0"
		],
		"description": "Return graphic screen status and parameters."
	},		
	"right$": {
		"prefix": "right$",
		"body": [
			"right$(${1:<STRING>},${2:<AMOUNT OF CHARACTERS>})$0"
		],
		"description": "Returns a string containing the last n characters from string."
	},
	"rmouse": {
		"prefix": "rmouse",
		"body": [
			"rmouse ${1:<X VARIABLE>},${2:<Y VARIABLE>},${3:<BUTTON VARIABLE>}$0"
		],
		"description": "Reads mouse position and button status."
	},
	"rnd": {
		"prefix": "rnd",
		"body": [
			"rnd(${1:TYPE})$0"
		],
		"description": "The function RND returns a pseudo random number."
	},
	"rpalette": {
		"prefix": "rpalette",
		"body": [
			"rpalette(${1:<SCREEN NUMBER>},${2:<INDEX>},${3:<RGB>})$0"
		],
		"description": "Returns the red, green or blue value of a palette colour index."
	},
	"rpen": {
		"prefix": "rpen",
		"body": [
			"rpen(${1:<PEN NUMBER>})$0"
		],
		"description": "Returns the colour index of pen n."
	},
	"rplay": {
		"prefix": "rplay",
		"body": [
			"rplay(${1:<VOICE>})$0"
		],
		"description": "Returns a value of 1 or 0, to indicate whether a melody is playing on the given voice channel or not."
	},
	"rreg": {
		"prefix": "rreg",
		"body": [
			"rreg ${1:<A REG>},${2:<X REG>},${3:<Y REG>},${4:<Z REG>},${5:<S REG>}$0"
		],
		"description": "Reads the values that were in the CPU registers after a SYS call, into the specified variables."
	},
	"rspcolor": {
		"prefix": "rspcolor",
		"body": [
			"rspcolor(${1:<MULTI COLOUR NUMBER>})$0"
		],
		"description": "Returns multi-colour sprite colours."
	},
	"rspeed": {
		"prefix": "rspeed",
		"body": [
			"rspeed(${1:<DUMMY ARGUMENT>})$0"
		],
		"description": "Returns the current CPU clock in MHz. Numeric 'DUMMY ARGUMENT', which is ignored."
	},
	"rsppos": {
		"prefix": "rsppos",
		"body": [
			"rsppos(${1:<SPRITE NUMBER>},${2:<SPRITE PARAMETER>})$0"
		],
		"description": "Returns a sprite’s position and speed."
	},
	"rsprite": {
		"prefix": "rsprite",
		"body": [
			"rsprite(${1:<SPRITE NUMBER>},${2:<SPRITE PARAMETER>})$0"
		],
		"description": "Returns a sprite’s parameter."
	},
	"runLine": {
		"prefix": "run",
		"body": [
			"run ${1:<LINE NUMBER>}$0"
		],
		"description": "Run the program that is currently in memory."
	},
	"runFile": {
		"prefix": "run",
		"body": [
			"run ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "Load and run a BASIC program."
	},
	"rwindow": {
		"prefix": "rwindow",
		"body": [
			"rwindow(${1:<SCREEN PARAMETER>})$0"
		],
		"description": "Returns information regarding the current text window."
	},
	"save": {
		"prefix": "save",
		"body": [
			"save ${1:<FILENAME>}${2:,u${3:<UNIT>}}$0"
		],
		"description": "Saves a BASIC program to a file of type PRG."
	},
	"saveiff": {
		"prefix": "saveiff",
		"body": [
			"saveiff ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "Saves a picture from memory to a disk file in IFF format."
	},
	"scratch": {
		"prefix": "scratch",
		"body": [
			"scratch ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}${6:,r}$0"
		],
		"description": "Used to erase a disk file."
	},
    "scnclr": {
		"prefix": "scnclr",
		"body": [
			"scnclr ${1:<COLOUR>}$0"
		],
		"description": "SCNCLR colour clears the graphic screen by filling it with the given colour. SCNCLR (with no arguments) clears the current text window."
	},      
    "screen": {
		"prefix": "screen",
		"body": [
			"screen ${1:<SCREEN NUMBER>}${2:,}${3:<WIDTH>},${4:<HEIGHT>},${5:<COLOUR DEPTH>}$0"
		],
		"description": "The version of SCREEN (which has pixel units for width and height) is the easiest way to start a graphics screen. "
	}, 
    "screenClr": {
		"prefix": "screen",
		"body": [
			"screen clr ${1:<COLOUR>}$0"
		],
		"description": "SCREEN CLR colour (or SCNCLR colour) clears the active graphics screen by filling it with colour. "
	}, 
    "screenDef": {
		"prefix": "screen",
		"body": [
			"screen def ${1:<SCREEN NUMBER>}${2:,}${3:<WIDTH FLAG>},${4:<HEIGHT FLAG>},${5:<COLOUR DEPTH>}$0"
		],
		"description": "SCREEN DEF works with predefined resolution parameters for the chosen screen. The width flag and height flag indicate whether high resolution (1) or low resolution (0) is chosen. "
	},
    "screenSet": {
		"prefix": "screen",
		"body": [
			"screen set ${1:<DRAWSCREEN>},${2:<VIEWSCREEN>}$0"
		],
		"description": "Sets screen numbers ( 0-3 ) for the drawing and the viewing screen, i.e.,while one screen is being viewed, you can draw on a separate screen and then later flip between them. "
	}, 	 
	"screenOpen": {
		"prefix": "screen",
		"body": [
			"screen open ${1:<SCREEN NUMBER>}$0"
		],
		"description": "Allocates resources and initialises the graphics context for the selected screen (0-3). "
	}, 
	"screenClose": {
		"prefix": "screen",
		"body": [
			"screen close ${1:<SCREEN NUMBER>}$0"
		],
		"description": "Closes screen (0-3) and frees resources. "
	}, 		
	"setDef": {
		"prefix": "set",
		"body": [
			"set def ${1:<UNIT>}$0"
		],
		"description": "SET DEF redefines the default unit for disk access, which is initialised to 8 by the DOS. Commands that do not explicitly specify a unit will use this default unit."
	},
	"setDis": {
		"prefix": "set",
		"body": [
			"set disk ${1:<OLD UNIT>} to ${2:<NEW UNIT>}$0"
		],
		"description": "SET DISK is used to change the unit number of a disk drive temporarily."
	},
	"setVer": {
		"prefix": "set",
		"body": [
			"set verify ${1|on,off|}$0"
		],
		"description": "SET VERIFY enables or disables the DOS verify-after-write mode for 3.5 drives."
	},
	"set bit": {
		"prefix": "set bit",
		"body": [
			"set bit ${1:<MEMORY ADDRESS>},${2:<BIT NUMBER>}$0"
		],
		"description": "Sets a single bit at the address. The bit number is a value in the range of 0-7."
	},		
	"sgn": {
		"prefix": "sgn",
		"body": [
			"sgn(${1:NUMERIC EXPRESSION})$0"
		],
		"description": "The function SGN gives autonomous of the algebraic sign the number (-1; 0; 1) of a numerical argument."
	},
	"sin": {
		"prefix": "sin",
		"body": [
			"sin(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "The numeric function SIN is a mathematical function which evaluates to the sine for a given angle, a number regarded as being in radians."
	},
	"sleep": {
		"prefix": "sleep",
		"body": [
			"sleep ${1:<SECONDS>}$0"
		],
		"description": "Pauses execution for the given duration. The argument is a positive floating point number. The precision is 1 microsecond."
	},
	"sound": {
		"prefix": "sound",
		"body": [
			"sound ${1:<VOICE>},${2:<FREQUENCY>},${3:<DURATION>}${4:,${5:<DIRECTION>},${6:<MIN FREQ>},${7:<SWEEP>},${8:<WAVE>},${9:<PULSE>}}$0"
		],
		"description": "Plays a sound effect."
	},
	"spc": {
		"prefix": "spc",
		"body": [
			"spc(${1:<COLUMNS>})$0"
		],
		"description": "Skips columns. The effect is similar to pressing → <column> times."
	},
	"speed": {
		"prefix": "speed",
		"body": [
			"speed ${1:<SPEED>}$0"
		],
		"description": "Set CPU clock to 1MHz, 3.5MHz or 40MHz. SPEED is a synonym of FAST. SPEED has no effect if POKE 0,65 has previously been used to set the CPU to 40MHz."
	},
	"sprcolor": {
		"prefix": "sprcolor",
		"body": [
			"sprcolor ${1:${2:<MULTI-COLOR 1>},${3:<MULTI-COLOR 2>}}$0"
		],
		"description": "Sets additional two multi-colour sprite colours in addition to the foreground colour of the SPRITE command."
	},
	"spriteClr": {
		"prefix": "sprite",
		"body": [
			"sprite clr"
		],
		"description": "SPRITE CLR clears all sprite data and sets all pointers and attributes to their default values."
	},
	"spriteLoad": {
		"prefix": "sprite",
		"body": [
			"sprite load ${1:FILENAME}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "SPRITE LOAD loads sprite data from filename to sprite memory."
	},
	"spriteSave": {
		"prefix": "sprite",
		"body": [
			"sprite save ${1:FILENAME}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "SPRITE SAVE saves sprite data from sprite memory to filename."
	},
	"sprite": {
		"prefix": "sprite",
		"body": [
			"sprite ${1:<SPRITE NUMBER>}${2:,${3:<SWITCH>},${4:<FOREGROUND COLOUR>},${5:<PRIORITY>},${6:<X EXPANDION>},${7:<Y EXPANSION>},${8:<MODE>}}$0"
		],
		"description": "The command SPRITE switches a sprite on or off and sets its attributes:"
	},
	"sprsav": {
		"prefix": "sprsav",
		"body": [
			"sprsav ${1:<SOURCE SPRITE NUMBER>},${2:<DESTINATION SPRITE NUMBER>}$0"
		],
		"description": "Copies sprite data."
	},
	"sqr": {
		"prefix": "sqr",
		"body": [
			"sqr(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "The numeric function SQR is a mathemathical function for square root of a number."
	},
	"st": {
		"prefix": "st",
		"body": [
			"st"
		],
		"description": "ST holds the status of the last I/O operation. If ST is zero, there was no error, otherwise it is set to a device dependent error code."
	},
	"stop": {
		"prefix": "stop",
		"body": [
			"stop"
		],
		"description": "Stops the execution of the BASIC program. A message will be displayed showing the line number where the program stopped."
	},		
	"str$": {
		"prefix": "str$",
		"body": [
			"str$(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "STR$ is used to converting numerical values or variables into a string."
	},
	"sys": {
		"prefix": "sys",
		"body": [
			"sys ${1:<MEMORY ADDRESS>}${2:,${3:<A REG>},${4:<X REG>},${5:<Y REG>},${6:<Z REG>},${7:<S REG>}}$0"
		],
		"description": "Calls a machine language subroutine. This can be a ROM-resident kernal routine or any other routine which has previously been loaded or POKEd to RAM."
	},
	"tab": {
		"prefix": "tab",
		"body": [
			"tab(${1:<COLUMN>})$0"
		],
		"description": "Positions the cursor at column."
	},
	"tan": {
		"prefix": "tan",
		"body": [
			"tan(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "The numerical function TAN returns the tangent of the argument. The argument is expected in units of radians. The result is in the range (-1.0 to +1.0)"
	},
	"tempo": {
		"prefix": "tempo",
		"body": [
			"tempo ${1:<SPEED>}$0"
		],
		"description": "Sets the playback speed for PLAY (speed 1-255). The duration (in seconds) of a whole note is computed with 'duration = 24/speed'."
	},
	"ti": {
		"prefix": "ti",
		"body": [
			"ti"
		],
		"description": "TI is a high precision timer with a resolution of 1 micro second. It is started or reset with CLR TI, and can be accessed in the same way as any other variable in expressions."
	},
	"ti$": {
		"prefix": "ti$",
		"body": [
			"ti$"
		],
		"description": "TI$ stores the time information of the RTC (Real-Time Clock) in text form, using the format: ”hh:mm:ss”. It is updated with every use."
	},
	"to": {
		"prefix": "to",
		"body": [
			"to"
		],
		"description": "TO is a secondary keyword used in combination with primary keywords, such as BACKUP, BSAVE, CHANGE, CONCAT, COPY, FOR, GO, RENAME, and SET DISK"
	},				
	"trap": {
		"prefix": "trap",
		"body": [
			"trap ${1:<LINE NUMBER>}$0"
		],
		"description": "TRAP with a valid line number registers the BASIC error handler. When a program has an error handler, the run-time behaviour changes."
	},
	"troff": {
		"prefix": "troff",
		"body": [
			"troff"
		],
		"description": "The command TROFF turns off trace mode (switched on by TRON)."
	},
	"tron": {
		"prefix": "tron",
		"body": [
			"tron"
		],
		"description": "The command TRON turns on trace mode."
	},
	"type": {
		"prefix": "type",
		"body": [
			"type ${1:<FILENAME>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "Prints the contents of a file containing text encoded as PETSCII."
	},
	"unlock": {
		"prefix": "unlock",
		"body": [
			"unlock ${1:<FILENAME/PATTERN>}${2:,d${3:<DRIVE>}}${4:,u${5:<UNIT>}}$0"
		],
		"description": "Used to unlock files. The specified file or a set of files, that matches the pattern, is unlocked and no more protected. It can be deleted afterwards with the commands DELETE, ERASE or SCRATCH"
	},
	"using": {
		"prefix": "using",
		"body": [
			"using ${1:<FORMAT>};${2:<ARGUMENT>}"
		],
		"description": "Parses the format string and evaluates the argument."
	},
	"usr": {
		"prefix": "usr",
		"body": [
			"usr(${1:<NUMERIC EXPRESSION>})$0"
		],
		"description": "Invokes an assembly language routine whose memory address is stored at $02F8 - $02F9. The result of the numeric expression is written to floating point accumulator 1."
	},
	"until": {
		"prefix": "until",
		"body": [
			"until"
		],
		"description": "A loop can be controlled by adding UNTIL or WHILE after the DO or LOOP."
	},
	"val": {
		"prefix": "val",
		"body": [
			"val(${1:<STRING EXPRESSION>})$0"
		],
		"description": "Converts a string to a floating point value. This function acts in the same way as reading from a string."
	},
	"verify": {
		"prefix": "verify",
		"body": [
			"verify ${1:<FILENAME>}${2:,${3:<UNIT>}${4:,${5:<BINFLAG>}}}$0"
		],
		"description": "VERIFY compares a binary file or BASIC program in memory with a disk file. It does the same as DVERIFY and BVERIFY, but the syntax is different."
	},
	"viewportClr": {
		"prefix": "viewport",
		"body": [
			"viewport clr"
		],
		"description": "VIEWPORT CLR fills the clipping region with the color of the drawing pen."
	},
	"viewportDef": {
		"prefix": "viewport",
		"body": [
			"viewport def ${1:<X POS>},${2:<Y POS>},${3:<WIDTH>},${4:<HEIGHT>}$0"
		],
		"description": "VIEWPORT DEF defines a clipping region with the origin (upper left position) set to x, y and the width and height. All following graphics commands are limited to the VIEWPORT region."
	},
	"vol": {
		"prefix": "vol",
		"body": [
			"vol ${1:<VOLUME>}$0"
		],
		"description": "Sets the volume for sound output with SOUND or PLAY. volume 0 (off) to 15 (loudest)."
	},
	"vsync": {
		"prefix": "vsync",
		"body": [
			"vsync ${1:<RASTER LINE>}$0"
		],
		"description": "Waits until the selected raster line is active. <RASTER LINE> (0 - 311) for PAL, (0 - 262) for NTSC mode."
	},
	"wait": {
		"prefix": "wait",
		"body": [
			"wait ${1:<MEMORY ADDRESS>},${2:<AND MASK>}${3:,${4:<XOR MASK>}}$0"
		],
		"description": "Pauses the BASIC program until a requested bit pattern is read from the given address."
	},
	"while": {
		"prefix": "while",
		"body": [
			"while"
		],
		"description": "A loop can be controlled by adding UNTIL or WHILE after the DO or LOOP."
	},
	"window": {
		"prefix": "window",
		"body": [
			"window ${1:<LEFT>},${2:<TOP>},${3:<RIGHT>},${4:<BOTTOM>}${5:,${6:<CLEAR>}}$0"
		],
		"description": "Sets the text screen window."
	},
	"wpeek": {
		"prefix": "wpeek",
		"body": [
			"wpeek (${1:<MEMORY ADDRESS>})$0"
		],
		"description": "Returns an unsigned 16-bit value (word) read from address (low byte) and address+1 (high byte)."
	},
	"wpoke": {
		"prefix": "wpoke",
		"body": [
			"wpoke ${1:<MEMORY ADDRESS>},${2:<WORD>}${3:,${4:<WORD>}}$0"
		],
		"description": "Writes one or more words into memory or memory mapped I/O, starting at address."
	},
	"xor": {
		"prefix": "xor",
		"body": [
			"${1:<OPERAND>} xor ${2:<OPERAND>}$0"
		],
		"description": "The Boolean XOR operator performs a bit-wise logical exclusive OR operation on two 16-bit values."
	},
	"{clr}": {
		"prefix": "{clr}",
		"body": [
			"chr$(147)$0"
		],
		"description": "Clears screen of any text, and causes the next character to be printed at the upper left-hand corner of the text screen."
	},
	"{clear}": {
		"prefix": "{clear}",
		"body": [
			"chr$(147)$0"
		],
		"description": "Clears screen of any text, and causes the next character to be printed at the upper left-hand corner of the text screen."
	},
	"{home}": {
		"prefix": "{home}",
		"body": [
			"chr$(19)$0"
		],
		"description": "Home: Next character will be printed in the upper left-hand corner of the screen."
	},
	"{right}": {
		"prefix": "{right}",
		"body": [
			"chr$(29)$0"
		],
		"description": "Advances the cursor one character position without printing anything."
	},
	"{left}": {
		"prefix": "{left}",
		"body": [
			"chr$(157)$0"
		],
		"description": "Moves the cursor one character position backwards, without printing or deleting anything."
	},
	"{down}": {
		"prefix": "{down}",
		"body": [
			"chr$(17)$0"
		],
		"description": "Cursor down: Next character will be printed in subsequent column one text line further down the screen."
	},
	"{up}": {
		"prefix": "{up}",
		"body": [
			"chr$(145)$0"
		],
		"description": "Cursor up: Next character will be printed in subsequent column one text line further up the screen."
	},
	"{blk}": {
		"prefix": "{blk}",
		"body": [
			"chr$(144)$0"
		],
		"description": "Changes the text color to white."
	},
	"{black}": {
		"prefix": "{black}",
		"body": [
			"chr$(144)$0"
		],
		"description": "Changes the text color to white."
	},
	"{wht}": {
		"prefix": "{wht}",
		"body": [
			"chr$(5)$0"
		],
		"description": "Changes the text color to white."
	},
	"{white}": {
		"prefix": "{white}",
		"body": [
			"chr$(5)$0"
		],
		"description": "Changes the text color to white."
	},
	"{red}": {
		"prefix": "{red}",
		"body": [
			"chr$(28)$0"
		],
		"description": "Changes the text color to red."
	},
	"{cyn}": {
		"prefix": "{cyn}",
		"body": [
			"chr$(159)$0"
		],
		"description": "Changes the text color to cyan."
	},
	"{cyan}": {
		"prefix": "{cyan}",
		"body": [
			"chr$(159)$0"
		],
		"description": "Changes the text color to cyan."
	},
	"{pur}": {
		"prefix": "{pur}",
		"body": [
			"chr$(156)$0"
		],
		"description": "Changes the text color to purple."
	},
	"{purple}": {
		"prefix": "{purple}",
		"body": [
			"chr$(156)$0"
		],
		"description": "Changes the text color to purple."
	},
	"{grn}": {
		"prefix": "{grn}",
		"body": [
			"chr$(30)$0"
		],
		"description": "Changes the text color to green."
	},
	"{green}": {
		"prefix": "{green}",
		"body": [
			"chr$(30)$0"
		],
		"description": "Changes the text color to green."
	},
	"{blu}": {
		"prefix": "{blu}",
		"body": [
			"chr$(31)$0"
		],
		"description": "Changes the text color to blue."
	},
	"{blue}": {
		"prefix": "{blue}",
		"body": [
			"chr$(31)$0"
		],
		"description": "Changes the text color to blue."
	},
	"{yel}": {
		"prefix": "{yel}",
		"body": [
			"chr$(158)$0"
		],
		"description": "Changes the text color to yellow."
	},
	"{yellow}": {
		"prefix": "{yellow}",
		"body": [
			"chr$(158)$0"
		],
		"description": "Changes the text color to yellow."
	},
	"{rvs on}": {
		"prefix": "{rvs on}",
		"body": [
			"chr$(18)$0"
		],
		"description": "Control character: Reverse on: Selects reverse video text."
	},
	"{reverse on}": {
		"prefix": "{reverse on}",
		"body": [
			"chr$(18)$0"
		],
		"description": "Control character: Reverse on: Selects reverse video text."
	},
	"{rvs off}": {
		"prefix": "{rvs off}",
		"body": [
			"chr$(146)$0"
		],
		"description": "Control character: Reverse off: De-selects reverse video text."
	},
	"{reverse off}": {
		"prefix": "{reverse off}",
		"body": [
			"chr$(146)$0"
		],
		"description": "Control character: Reverse off: De-selects reverse video text."
	},
	"{orange}": {
		"prefix": "{orange}",
		"body": [
			"chr$(129)$0"
		],
		"description": "Changes the text color to orange."
	},
	"[<1>]": {
		"prefix": "[<1>]",
		"body": [
			"chr$(129)$0"
		],
		"description": "Changes the text color to orange."
	},
	"{brown}": {
		"prefix": "{brown}",
		"body": [
			"chr$(149)$0"
		],
		"description": "Changes the text color to brown."
	},
	"[<2>]": {
		"prefix": "[<2>]",
		"body": [
			"chr$(149)$0"
		],
		"description": "Changes the text color to brown."
	},
	"{pink}": {
		"prefix": "{pink}",
		"body": [
			"chr$(150)$0"
		],
		"description": "Changes the text color to pink."
	},
	"[<3>]": {
		"prefix": "[<3>]",
		"body": [
			"chr$(150)$0"
		],
		"description": "Changes the text color to pink."
	},
	"{dark grey}": {
		"prefix": "{dark grey}",
		"body": [
			"chr$(151)$0"
		],
		"description": "Changes the text color to darkgrey."
	},
	"[<4>]": {
		"prefix": "[<4>]",
		"body": [
			"chr$(151)$0"
		],
		"description": "Changes the text color to pink."
	},
	"{grey}": {
		"prefix": "{grey}",
		"body": [
			"chr$(152)$0"
		],
		"description": "Changes the text color to grey."
	},
	"[<5>]": {
		"prefix": "[<5>]",
		"body": [
			"chr$(152)$0"
		],
		"description": "Changes the text color to grey."
	},
	"{light green}": {
		"prefix": "{light green}",
		"body": [
			"chr$(153)$0"
		],
		"description": "Changes the text color to lightgreen."
	},
	"[<6>]": {
		"prefix": "[<6>]",
		"body": [
			"chr$(153)$0"
		],
		"description": "Changes the text color to lightgreen."
	},
	"{light blue}": {
		"prefix": "{light blue}",
		"body": [
			"chr$(154)$0"
		],
		"description": "Changes the text color to lightblue."
	},
	"[<7>]": {
		"prefix": "[<7>]",
		"body": [
			"chr$(154)$0"
		],
		"description": "Changes the text color to lightblue."
	},
	"{light grey}": {
		"prefix": "{light grey}",
		"body": [
			"chr$(155)$0"
		],
		"description": "Changes the text color to lightgrey."
	},
	"[<8>]": {
		"prefix": "[<8>]",
		"body": [
			"chr$(155)$0"
		],
		"description": "Changes the text color to lightgrey."
	},
	"{f1}": {
		"prefix": "{f1}",
		"body": [
			"chr$(133)$0"
		],
		"description": "To use for input with GET"
	},
	"{f2}": {
		"prefix": "{f2}",
		"body": [
			"chr$(137)$0"
		],
		"description": "To use for input with GET"
	},
	"{f3}": {
		"prefix": "{f3}",
		"body": [
			"chr$(134)$0"
		],
		"description": "To use for input with GET"
	},
	"{f4}": {
		"prefix": "{f4}",
		"body": [
			"chr$(138)$0"
		],
		"description": "To use for input with GET"
	},
	"{f5}": {
		"prefix": "{f5}",
		"body": [
			"chr$(135)$0"
		],
		"description": "To use for input with GET"
	},
	"{f6}": {
		"prefix": "{f6}",
		"body": [
			"chr$(139)$0"
		],
		"description": "To use for input with GET"
	},
	"{f7}": {
		"prefix": "{f7}",
		"body": [
			"chr$(136)$0"
		],
		"description": "To use for input with GET"
	},
	"{f8}": {
		"prefix": "{f8}",
		"body": [
			"chr$(140)$0"
		],
		"description": "To use for input with GET"
	},
	"{del}": {
		"prefix": "{del}",
		"body": [
			"chr$(20)$0"
		],
		"description": "Delete, or backspace; erases the previous character and moves the cursor one character position to the left."
	},
	"{inst}": {
		"prefix": "{inst}",
		"body": [
			"chr$(148)$0"
		],
		"description": "Insert: Makes room for extra characters at the current cursor position, by pushing existing characters at that position further to the right."
	},
	"{run/stop}": {
		"prefix": "{run/stop}",
		"body": [
			"chr$(3)$0"
		],
		"description": "Uset by GET query if RUN/STOP has been deactivated"
	},
	"{ctrl+i}": {
		"prefix": "{ctrl+i}",
		"body": [
			"chr$(9)$0"
		],
		"description": "Enables changing the character set using the SHIFT + Commodore key combination."
	},
	"{return}": {
		"prefix": "{return}",
		"body": [
			"chr$(13)$0"
		],
		"description": "Control character: return."
	},
	"{ctrl+n}": {
		"prefix": "{ctrl+n}",
		"body": [
			"chr$(14)$0"
		],
		"description": "Select the lowercase/uppercase character set."
	},
	"{ctrl+/}": {
		"prefix": "{ctrl+/}", 
		"body": [
			"chr$(149)$0"
		],
		"description": "Select the uppercase/semigraphics character set."
	},
	"{space}": {
		"prefix": "{space}",
		"body": [
			"chr$(32)$0"
		],
		"description": "Control character: Space."
	},
	"{shift return}": {
		"prefix": "{shift return}",
		"body": [
			"chr$(141)$0"
		],
		"description": "Control character: new row."
	},
	"{pi}": {
		"prefix": "{pi}",
		"body": [
			"chr$(126)$0"
		],
		"description": "Control character: PI."
	}
}