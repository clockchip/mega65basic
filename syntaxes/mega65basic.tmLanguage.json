{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Mega65 Basic Language",
	"patterns": [
		{
			"include": "#control"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#graphics"
		},		
		{
			"include": "#other"
		},
		{
			"include": "#otherString"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#numerics"
		},
		{
			"include": "#vardefs"
		},
		{
			"include": "#func"
		}
	],
	"repository": {
		"func": {
			"patterns": [{
				"name": "entity.name.function.bas",
				"match": "(def fn|fn)\\s+([a-z0-9]+)",
				"captures": {
					"1": {
						"name": "keyword.control.bas"
					},
					"2": {
						"name": "entity.name.function.bas"
					}
				}
			}]
		},			
		"comments": {
			"patterns": [{
				"name": "comment.line.bas",
				"match": "(rem)(.*)"
			}]
		},
		"vardefs": {
			"patterns": [{
				"name": "storage.modifier.bas",
				"match": "(dim|data|let)"
			}]
		},	
		"numerics": {
			"patterns": [{
				"name": "constant.numeric.bas",
				"match": "([0-9]+)"
			}]
		},
		"graphics": {
			"patterns": [{
				"name": "keyword.graphics.bas",
				"match": "(dot|scnclr|screen|screen clr|screen def|screen set|screen open|screen close|palette|palette color|palette restore|pen)"
			}]
		},
		"control": {
			"patterns": [{
				"name": "keyword.control.bas",
		    	"match": "(end|for|gosub|goto|if|next|return|step|stop|then|to)"
			}]
		},			
		"other": {
			"patterns": [{
				"name": "keyword.other.bas",
		    	"match": "(abs|asc|atn|close|clr|cmd|cont|cos|data|def|exp|fre|getkey|get|get#|input|input#|int|len|let|line|list|load|log|new|next|on|open|peek|Ï€|poke|pos|print|print#|read|restore|rnd|run|save|sgn|sin|spc|sqr|status|st|stop|sys|tab|tan|time|ti|time|ti|usr|val|verify|wait)"
			}]
		},
		"otherString": {
			"patterns": [{
				"name": "keyword.other.bas",
		    	"begin": "(chr|left|mid|right|str|time|ti)",
				"end": "\\$"
			}]
		},
		"operators": {
			"patterns": [{
				"name": "keyword.operator.bas",
				"match": "(\\*|/|\\+|-|\\^|=|<>|<|>|<=|=<|>=|=>|and|or|not)"
			}]
		},		
		"strings": {
			"name": "string.quoted.double.bas",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.bas",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.bas"
}